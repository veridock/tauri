<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%" viewBox="0 0 1000 700">
    <?php
            // 1. Najpierw logika PHP (bez output!)
            $current_time = date('H:i:s');
            $tasks_count = 5; // z bazy danych

            ?>
    <title>Todo Manager PWA - Czas: <?php echo $current_time; ?> - ZadaÅ„: <?php echo $tasks_count; ?></title>
    <desc>Advanced task management application with PHP backend integration, JavaScript interactivity, and JSON
        metadata
    </desc>

    <!-- JSON Application Configuration -->
    <script type="application/json" id="app-config"><![CDATA[
  {
    "application": {
      "name": "Todo Manager PWA demo",
      "version": "2.0.0",
      "type": "productivity_app",
      "category": "task_management",
      "author": "VeriDock Grid TaskFlow"
    },
    "features": {
      "task_management": ["add", "edit", "delete", "complete", "prioritize"],
      "data_persistence": ["local_storage", "json_export", "sync_backend"],
      "user_interface": ["responsive_design", "priority_colors", "real_time_updates"],
      "integrations": ["php_api", "json_metadata", "analytics_tracking"]
    },
    "backend_services": {
      "api_base_url": "/api/todos/",
      "authentication": "session_tokens",
      "database": "json_file_storage",
      "sync_interval": "real_time",
      "backup_frequency": "daily"
    },
    "task_config": {
      "priorities": ["low", "medium", "high", "urgent"],
      "statuses": ["pending", "in_progress", "completed", "cancelled"],
      "categories": ["work", "personal", "shopping", "urgent", "misc"]
    }
  }
  ]]></script>

    <!-- Backend PHP Implementation -->
    <script type="application/json" id="backend-logic"><![CDATA[
  {
    "server_implementation": {
      "todo_controller": "class TodoController extends BaseController { private $dataFile = 'todos.json'; public function getAllTasks() { if (file_exists($this->dataFile)) { return json_decode(file_get_contents($this->dataFile), true); } return []; } public function addTask($data) { $tasks = $this->getAllTasks(); $newTask = [ 'id' => uniqid(), 'text' => $data['text'], 'priority' => $data['priority'], 'status' => 'pending', 'created_at' => date('Y-m-d H:i:s'), 'completed_at' => null ]; $tasks[] = $newTask; file_put_contents($this->dataFile, json_encode($tasks, JSON_PRETTY_PRINT)); return $newTask; } public function updateTask($id, $data) { $tasks = $this->getAllTasks(); foreach ($tasks as &$task) { if ($task['id'] === $id) { $task = array_merge($task, $data); if ($data['status'] === 'completed') { $task['completed_at'] = date('Y-m-d H:i:s'); } break; } } file_put_contents($this->dataFile, json_encode($tasks, JSON_PRETTY_PRINT)); return true; } public function deleteTask($id) { $tasks = $this->getAllTasks(); $tasks = array_filter($tasks, function($task) use ($id) { return $task['id'] !== $id; }); file_put_contents($this->dataFile, json_encode(array_values($tasks), JSON_PRETTY_PRINT)); return true; } }",
      "api_routes": "Route::group(['prefix' => 'api/todos', 'middleware' => ['auth']], function() { Route::get('/', 'TodoController@getAllTasks'); Route::post('/', 'TodoController@addTask'); Route::put('/{id}', 'TodoController@updateTask'); Route::delete('/{id}', 'TodoController@deleteTask'); Route::get('/export', 'TodoController@exportTasks'); Route::post('/import', 'TodoController@importTasks'); });",
      "validation_rules": "class TodoValidation { public static function validateTask($data) { $rules = [ 'text' => 'required|string|min:1|max:255', 'priority' => 'required|in:low,medium,high,urgent', 'status' => 'in:pending,in_progress,completed,cancelled' ]; return Validator::make($data, $rules); } }"
    }
  }
  ]]></script>

    <defs>
        <style><![CDATA[
      .header { font-family: Arial, sans-serif; font-size: 28px; font-weight: bold; fill: white; }
      .subheader { font-family: Arial, sans-serif; font-size: 16px; fill: #bbbbbb; }
      .card { fill: rgba(255,255,255,0.1); stroke: #4caf50; stroke-width: 2; rx: 12; }
      .task-text { font-family: Arial, sans-serif; font-size: 14px; fill: white; }
      .priority-high { fill: #f44336; }
      .priority-medium { fill: #ff9800; }
      .priority-low { fill: #4caf50; }
      .priority-urgent { fill: #e91e63; }
      .btn { fill: #4caf50; stroke: none; rx: 8; cursor: pointer; transition: fill 0.3s; }
      .btn:hover { fill: #45a049; }
      .btn-text { font-family: Arial, sans-serif; font-size: 12px; fill: white; text-anchor: middle; pointer-events: none; }
      .task-item { cursor: pointer; }
      .task-completed { opacity: 0.5; }
      .input-area { fill: rgba(255,255,255,0.2); stroke: #4caf50; stroke-width: 2; rx: 8; }
      .counter-text { font-family: Arial, sans-serif; font-size: 16px; fill: #4caf50; font-weight: bold; }
    ]]></style>

        <linearGradient id="bgGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" style="stop-color:#1a1a2e;stop-opacity:1"/>
            <stop offset="100%" style="stop-color:#16213e;stop-opacity:1"/>
        </linearGradient>

        <linearGradient id="cardGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" style="stop-color:rgba(76,175,80,0.2);stop-opacity:1"/>
            <stop offset="100%" style="stop-color:rgba(76,175,80,0.1);stop-opacity:1"/>
        </linearGradient>
    </defs>


    <!-- Background -->
    <rect width="100%" height="100%" fill="url(#bgGradient)"/>

    <!-- Header Section -->
    <text x="50" y="50" class="header">ðŸ“‹
        Todo Manager PWA - <?php echo date('H:i:s'); ?> Czas: <?php echo $current_time; ?> -
        ZadaÅ„: <?php echo $tasks_count; ?>
    </text>
    <text x="50" y="75" class="subheader">Advanced Task Management with PHP Backend</text>

    <!-- Stats Section -->
    <rect x="50" y="90" width="900" height="60" class="card"/>
    <text x="70" y="115" class="task-text">Task Statistics:</text>
    <text x="70" y="135" class="counter-text" id="pending-count">Pending: 0</text>
    <text x="200" y="135" class="counter-text" id="completed-count">Completed: 0</text>
    <text x="350" y="135" class="counter-text" id="total-count">Total: 0</text>

    <!-- Add Task Section -->
    <rect x="50" y="170" width="900" height="80" class="card"/>
    <text x="70" y="195" class="task-text">Add New Task:</text>

    <!-- Task Input Area (SVG-based) -->
    <rect x="70" y="205" width="500" height="35" class="input-area" id="task-input-area" onclick="focusTaskInput()"/>
    <text x="80" y="227" class="task-text" id="task-input-text">Click to enter task description...</text>

    <!-- Priority Selection -->
    <g id="priority-selector">
        <text x="590" y="220" class="task-text">Priority:</text>
        <rect x="650" y="205" width="50" height="35" class="priority-low" rx="6" onclick="setPriority('low')"
              id="priority-low"/>
        <text x="675" y="227" class="btn-text">Low</text>
        <rect x="710" y="205" width="60" height="35" class="priority-medium" rx="6" onclick="setPriority('medium')"
              id="priority-medium"/>
        <text x="740" y="227" class="btn-text">Med</text>
        <rect x="780" y="205" width="50" height="35" class="priority-high" rx="6" onclick="setPriority('high')"
              id="priority-high"/>
        <text x="805" y="227" class="btn-text">High</text>
        <rect x="840" y="205" width="60" height="35" class="priority-urgent" rx="6" onclick="setPriority('urgent')"
              id="priority-urgent"/>
        <text x="870" y="227" class="btn-text">Urgent</text>
    </g>

    <!-- Add Button -->
    <rect x="850" y="260" width="100" height="35" class="btn" onclick="addNewTask()"/>
    <text x="900" y="282" class="btn-text">Add Task</text>

    <!-- Tasks List Container -->
    <g id="tasks-container">
        <!-- Dynamic tasks will be rendered here -->
    </g>

    <!-- Action Buttons -->
    <rect x="50" y="630" width="120" height="35" class="btn" onclick="clearCompleted()"/>
    <text x="110" y="652" class="btn-text">Clear Done</text>

    <rect x="180" y="630" width="120" height="35" class="btn" onclick="exportTasks()"/>
    <text x="240" y="652" class="btn-text">Export JSON</text>

    <rect x="310" y="630" width="120" height="35" class="btn" onclick="syncWithBackend()"/>
    <text x="370" y="652" class="btn-text">Sync Backend</text>

    <script><![CDATA[
    // Todo Manager PWA JavaScript Implementation
    let tasks = [];
    let currentPriority = 'medium';
    let taskInputValue = '';
    let editingTaskId = null;

    // Initialize app
    function initTodoApp() {
      loadTasks();
      updateStats();
      renderTasks();
      console.log('Todo Manager PWA initialized');
    }

    // Priority selection
    function setPriority(priority) {
      currentPriority = priority;
      // Update visual feedback
      const priorities = ['low', 'medium', 'high', 'urgent'];
      priorities.forEach(p => {
        const element = document.getElementById('priority-' + p);
        if (element) {
          element.setAttribute('stroke', p === priority ? '#ffffff' : 'none');
          element.setAttribute('stroke-width', p === priority ? '3' : '0');
        }
      });
      console.log('Priority set to:', priority);
    }

    // Focus on task input (simulate input field)
    function focusTaskInput() {
      const inputText = document.getElementById('task-input-text');
      if (inputText) {
        inputText.textContent = 'Type your task here...';
        inputText.setAttribute('fill', '#ffffff');
      }
      // Simple prompt-based input for SVG compatibility
      const userInput = prompt('Enter task description:');
      if (userInput && userInput.trim()) {
        taskInputValue = userInput.trim();
        inputText.textContent = taskInputValue;
      } else {
        inputText.textContent = 'Click to enter task description...';
        inputText.setAttribute('fill', '#bbbbbb');
      }
    }

    // Add new task
    function addNewTask() {
      if (!taskInputValue.trim()) {
        alert('Please enter a task description first');
        return;
      }

      const newTask = {
        id: Date.now().toString(),
        text: taskInputValue,
        priority: currentPriority,
        status: 'pending',
        createdAt: new Date().toISOString(),
        completedAt: null
      };

      tasks.push(newTask);
      saveTasks();
      updateStats();
      renderTasks();

      // Reset input
      taskInputValue = '';
      const inputText = document.getElementById('task-input-text');
      if (inputText) {
        inputText.textContent = 'Click to enter task description...';
        inputText.setAttribute('fill', '#bbbbbb');
      }

      console.log('Task added:', newTask);
    }

    // Toggle task completion
    function toggleTask(taskId) {
      const task = tasks.find(t => t.id === taskId);
      if (task) {
        task.status = task.status === 'completed' ? 'pending' : 'completed';
        task.completedAt = task.status === 'completed' ? new Date().toISOString() : null;
        saveTasks();
        updateStats();
        renderTasks();
        console.log('Task toggled:', task);
      }
    }

    // Delete task
    function deleteTask(taskId) {
      if (confirm('Are you sure you want to delete this task?')) {
        tasks = tasks.filter(t => t.id !== taskId);
        saveTasks();
        updateStats();
        renderTasks();
        console.log('Task deleted:', taskId);
      }
    }

    // Render tasks in the SVG
    function renderTasks() {
      const container = document.getElementById('tasks-container');
      if (!container) return;

      // Clear existing tasks
      while (container.firstChild) {
        container.removeChild(container.firstChild);
      }

      // Render each task
      tasks.forEach((task, index) => {
        const yPos = 300 + (index * 50);
        if (yPos > 580) return; // Don't render beyond visible area

        const taskGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');
        taskGroup.setAttribute('class', task.status === 'completed' ? 'task-item task-completed' : 'task-item');

        // Task background
        const taskBg = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
        taskBg.setAttribute('x', '50');
        taskBg.setAttribute('y', yPos);
        taskBg.setAttribute('width', '900');
        taskBg.setAttribute('height', '40');
        taskBg.setAttribute('class', 'card');
        taskGroup.appendChild(taskBg);

        // Priority indicator
        const priorityRect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
        priorityRect.setAttribute('x', '55');
        priorityRect.setAttribute('y', yPos + 5);
        priorityRect.setAttribute('width', '8');
        priorityRect.setAttribute('height', '30');
        priorityRect.setAttribute('class', 'priority-' + task.priority);
        priorityRect.setAttribute('rx', '4');
        taskGroup.appendChild(priorityRect);

        // Task text
        const taskText = document.createElementNS('http://www.w3.org/2000/svg', 'text');
        taskText.setAttribute('x', '75');
        taskText.setAttribute('y', yPos + 25);
        taskText.setAttribute('class', 'task-text');
        taskText.textContent = task.text + ' (' + task.priority + ')';
        if (task.status === 'completed') {
          taskText.setAttribute('text-decoration', 'line-through');
        }
        taskGroup.appendChild(taskText);

        // Complete button
        const completeBtn = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
        completeBtn.setAttribute('x', '750');
        completeBtn.setAttribute('y', yPos + 8);
        completeBtn.setAttribute('width', '80');
        completeBtn.setAttribute('height', '24');
        completeBtn.setAttribute('class', 'btn');
        completeBtn.setAttribute('onclick', 'toggleTask("' + task.id + '")');
        taskGroup.appendChild(completeBtn);

        const completeBtnText = document.createElementNS('http://www.w3.org/2000/svg', 'text');
        completeBtnText.setAttribute('x', '790');
        completeBtnText.setAttribute('y', yPos + 23);
        completeBtnText.setAttribute('class', 'btn-text');
        completeBtnText.textContent = task.status === 'completed' ? 'Undo' : 'Done';
        taskGroup.appendChild(completeBtnText);

        // Delete button
        const deleteBtn = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
        deleteBtn.setAttribute('x', '840');
        deleteBtn.setAttribute('y', yPos + 8);
        deleteBtn.setAttribute('width', '80');
        deleteBtn.setAttribute('height', '24');
        deleteBtn.setAttribute('fill', '#f44336');
        deleteBtn.setAttribute('rx', '8');
        deleteBtn.setAttribute('onclick', 'deleteTask("' + task.id + '")');
        taskGroup.appendChild(deleteBtn);

        const deleteBtnText = document.createElementNS('http://www.w3.org/2000/svg', 'text');
        deleteBtnText.setAttribute('x', '880');
        deleteBtnText.setAttribute('y', yPos + 23);
        deleteBtnText.setAttribute('class', 'btn-text');
        deleteBtnText.textContent = 'Delete';
        taskGroup.appendChild(deleteBtnText);

        container.appendChild(taskGroup);
      });
    }

    // Update statistics
    function updateStats() {
      const pendingCount = tasks.filter(t => t.status === 'pending').length;
      const completedCount = tasks.filter(t => t.status === 'completed').length;
      const totalCount = tasks.length;

      const pendingEl = document.getElementById('pending-count');
      const completedEl = document.getElementById('completed-count');
      const totalEl = document.getElementById('total-count');

      if (pendingEl) pendingEl.textContent = 'Pending: ' + pendingCount;
      if (completedEl) completedEl.textContent = 'Completed: ' + completedCount;
      if (totalEl) totalEl.textContent = 'Total: ' + totalCount;
    }

    // Save tasks to localStorage
    function saveTasks() {
      try {
        localStorage.setItem('todoManager_tasks', JSON.stringify(tasks));
      } catch (e) {
        console.warn('Could not save to localStorage:', e);
      }
    }

    // Load tasks from localStorage
    function loadTasks() {
      try {
        const saved = localStorage.getItem('todoManager_tasks');
        if (saved) {
          tasks = JSON.parse(saved);
        }
      } catch (e) {
        console.warn('Could not load from localStorage:', e);
        tasks = [];
      }
    }

    // Clear completed tasks
    function clearCompleted() {
      if (confirm('Delete all completed tasks?')) {
        tasks = tasks.filter(t => t.status !== 'completed');
        saveTasks();
        updateStats();
        renderTasks();
        console.log('Completed tasks cleared');
      }
    }

    // Export tasks to JSON
    function exportTasks() {
      const dataStr = JSON.stringify(tasks, null, 2);
      const dataBlob = new Blob([dataStr], {type: 'application/json'});
      const url = URL.createObjectURL(dataBlob);
      const link = document.createElement('a');
      link.href = url;
      link.download = 'todo-manager-export.json';
      link.click();
      console.log('Tasks exported');
    }

    // Sync with PHP backend
    function syncWithBackend() {
      console.log('Syncing with PHP backend...');
      // Simulate backend sync
      alert('Backend sync completed! ' + tasks.length + ' tasks synchronized.');
    }

    // Initialize the app when SVG loads
    document.addEventListener('DOMContentLoaded', initTodoApp);

    // Initialize immediately if DOM is already loaded
    if (document.readyState !== 'loading') {
      initTodoApp();
    }
  ]]></script>
</svg>
