<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xhtml="http://www.w3.org/1999/xhtml" width="100%" height="100%"
     viewBox="0 0 1000 700">
    <?php
            // 1. Najpierw logika PHP (bez output!)
            $current_time = date('H:i:s');
            $tasks_count = 5; // z bazy danych

            ?>
    <title>Todo Manager PWA - Czas: <?php echo $current_time; ?> - ZadaÅ„: <?php echo $tasks_count; ?></title>
    <desc>Advanced task management application with PHP backend integration, JavaScript interactivity, and JSON
        metadata
    </desc>

    <!-- JSON Application Configuration -->
    <script type="application/json" id="app-config"><![CDATA[
  {
    "application": {
      "name": "Todo Manager PWA demo",
      "version": "2.0.0",
      "type": "productivity_app",
      "category": "task_management",
      "author": "VeriDock Grid TaskFlow"
    },
    "features": {
      "task_management": ["add", "edit", "delete", "complete", "prioritize"],
      "data_persistence": ["local_storage", "json_export", "sync_backend"],
      "user_interface": ["responsive_design", "priority_colors", "real_time_updates"],
      "integrations": ["php_api", "json_metadata", "analytics_tracking"]
    },
    "backend_services": {
      "api_base_url": "/api/todos/",
      "authentication": "session_tokens",
      "database": "json_file_storage",
      "sync_interval": "real_time",
      "backup_frequency": "daily"
    },
    "task_config": {
      "priorities": ["low", "medium", "high", "urgent"],
      "statuses": ["pending", "in_progress", "completed", "cancelled"],
      "categories": ["work", "personal", "shopping", "urgent", "misc"]
    }
  }
  ]]></script>

    <!-- Backend PHP Implementation -->
    <script type="application/json" id="backend-logic"><![CDATA[
  {
    "server_implementation": {
      "todo_controller": "class TodoController extends BaseController { private $dataFile = 'todos.json'; public function getAllTasks() { if (file_exists($this->dataFile)) { return json_decode(file_get_contents($this->dataFile), true); } return []; } public function addTask($data) { $tasks = $this->getAllTasks(); $newTask = [ 'id' => uniqid(), 'text' => $data['text'], 'priority' => $data['priority'], 'status' => 'pending', 'created_at' => date('Y-m-d H:i:s'), 'completed_at' => null ]; $tasks[] = $newTask; file_put_contents($this->dataFile, json_encode($tasks, JSON_PRETTY_PRINT)); return $newTask; } public function updateTask($id, $data) { $tasks = $this->getAllTasks(); foreach ($tasks as &$task) { if ($task['id'] === $id) { $task = array_merge($task, $data); if ($data['status'] === 'completed') { $task['completed_at'] = date('Y-m-d H:i:s'); } break; } } file_put_contents($this->dataFile, json_encode($tasks, JSON_PRETTY_PRINT)); return true; } public function deleteTask($id) { $tasks = $this->getAllTasks(); $tasks = array_filter($tasks, function($task) use ($id) { return $task['id'] !== $id; }); file_put_contents($this->dataFile, json_encode(array_values($tasks), JSON_PRETTY_PRINT)); return true; } }",
      "api_routes": "Route::group(['prefix' => 'api/todos', 'middleware' => ['auth']], function() { Route::get('/', 'TodoController@getAllTasks'); Route::post('/', 'TodoController@addTask'); Route::put('/{id}', 'TodoController@updateTask'); Route::delete('/{id}', 'TodoController@deleteTask'); Route::get('/export', 'TodoController@exportTasks'); Route::post('/import', 'TodoController@importTasks'); });",
      "validation_rules": "class TodoValidation { public static function validateTask($data) { $rules = [ 'text' => 'required|string|min:1|max:255', 'priority' => 'required|in:low,medium,high,urgent', 'status' => 'in:pending,in_progress,completed,cancelled' ]; return Validator::make($data, $rules); } }"
    }
  }
  ]]></script>

    <defs>
        <style><![CDATA[
      .header { font-family: Arial, sans-serif; font-size: 28px; font-weight: bold; fill: white; }
      .subheader { font-family: Arial, sans-serif; font-size: 16px; fill: #bbbbbb; }
      .card { fill: rgba(255,255,255,0.1); stroke: #4caf50; stroke-width: 2; rx: 12; }
      .task-text { font-family: Arial, sans-serif; font-size: 14px; fill: white; }
      .priority-high { fill: #f44336; }
      .priority-medium { fill: #ff9800; }
      .priority-low { fill: #4caf50; }
      .priority-urgent { fill: #e91e63; }
      .btn { fill: #4caf50; stroke: none; rx: 8; cursor: pointer; transition: fill 0.3s; }
      .btn:hover { fill: #45a049; }
      .btn-text { font-family: Arial, sans-serif; font-size: 12px; fill: white; text-anchor: middle; pointer-events: none; }
      .task-item { cursor: pointer; }
      .task-completed { opacity: 0.5; }
      .input-area { fill: rgba(255,255,255,0.2); stroke: #4caf50; stroke-width: 2; rx: 8; }
      .counter-text { font-family: Arial, sans-serif; font-size: 16px; fill: #4caf50; font-weight: bold; }
    ]]></style>

        <linearGradient id="bgGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" style="stop-color:#1a1a2e;stop-opacity:1"/>
            <stop offset="100%" style="stop-color:#16213e;stop-opacity:1"/>
        </linearGradient>

        <linearGradient id="cardGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" style="stop-color:rgba(76,175,80,0.2);stop-opacity:1"/>
            <stop offset="100%" style="stop-color:rgba(76,175,80,0.1);stop-opacity:1"/>
        </linearGradient>
    </defs>


    <!-- Background -->
    <rect width="100%" height="100%" fill="url(#bgGradient)"/>

    <!-- Header Section -->
    <text x="50" y="50" class="header">ðŸ“‹
        Todo Manager PWA - Czas: <?php echo $current_time; ?> -
        ZadaÅ„: <?php echo $tasks_count; ?>
    </text>
    <text x="50" y="75" class="subheader">Advanced Task Management with PHP Backend</text>

    <!-- Stats Section -->
    <rect x="50" y="90" width="900" height="60" class="card"/>
    <text x="70" y="115" class="task-text">Task Statistics:</text>
    <text x="70" y="135" class="counter-text" id="pending-count">Pending: 0</text>
    <text x="200" y="135" class="counter-text" id="completed-count">Completed: 0</text>
    <text x="350" y="135" class="counter-text" id="total-count">Total: 0</text>

    <!-- Add New Task Section -->
    <rect x="50" y="170" width="900" height="80" class="card"/>
    <text x="70" y="195" class="task-text">Add New Task:</text>

    <!-- Task Input Area (Modern HTML Input) -->
    <foreignObject width="500" height="35" x="70" y="205">
        <xhtml:input id="task-input" placeholder="Click to enter task description..."
                     style="width:100%;height:100%;padding:8px;border-radius:6px;border:2px solid #4caf50;font-size:14px;background:rgba(255,255,255,0.2);color:#ffffff;"
                     type="text"/>
    </foreignObject>

    <!-- Priority Selection (Modern HTML Select) -->
    <text x="590" y="220" class="task-text">Priority:</text>
    <foreignObject width="200" height="35" x="650" y="205">
        <xhtml:select id="priority-selector"
                      style="width:100%;height:100%;padding:6px;border-radius:6px;border:2px solid #4caf50;font-size:12px;background:rgba(255,255,255,0.1);color:#ffffff;">
            <xhtml:option value="low">Low</xhtml:option>
            <xhtml:option value="medium">Medium</xhtml:option>
            <xhtml:option value="high">High</xhtml:option>
            <xhtml:option value="urgent">Urgent</xhtml:option>
        </xhtml:select>
    </foreignObject>

    <!-- Add Button (Modern HTML Button) -->
    <foreignObject width="100" height="35" x="850" y="260">
        <xhtml:button onclick="addNewTask()"
                      style="width:100%;height:100%;padding:6px;border-radius:6px;border:2px solid #4caf50;font-size:12px;background:#4caf50;color:#ffffff;cursor:pointer;">
            Add Task
        </xhtml:button>
    </foreignObject>

    <!-- Tasks List Container (Modern HTML Container) -->
    <text x="70" y="325" class="task-text">Tasks:</text>
    <foreignObject width="900" height="300" x="50" y="330">
        <xhtml:div id="tasks-container" 
                   style="width:100%;height:100%;padding:15px;border-radius:8px;border:2px solid #4caf50;background:rgba(255,255,255,0.05);overflow-y:auto;font-family:Arial,sans-serif;">
            <!-- Dynamic tasks will be rendered here -->
        </xhtml:div>
    </foreignObject>

    <!-- Action Buttons (Modern HTML Buttons) -->
    <foreignObject width="120" height="35" x="50" y="630">
        <xhtml:button onclick="clearCompleted()"
                      style="width:100%;height:100%;padding:6px;border-radius:6px;border:2px solid #4caf50;font-size:12px;background:rgba(76,175,80,0.8);color:#ffffff;cursor:pointer;">
            Clear Done
        </xhtml:button>
    </foreignObject>

    <foreignObject width="120" height="35" x="180" y="630">
        <xhtml:button onclick="exportTasks()"
                      style="width:100%;height:100%;padding:6px;border-radius:6px;border:2px solid #4caf50;font-size:12px;background:rgba(76,175,80,0.8);color:#ffffff;cursor:pointer;">
            Export JSON
        </xhtml:button>
    </foreignObject>

    <script><![CDATA[
    // Todo Manager PWA JavaScript Implementation
    let tasks = [];
    let currentPriority = 'medium';
    let taskInputValue = '';
    let editingTaskId = null;

    // Initialize app
    function initTodoApp() {
      loadTasks();
      updateStats();
      renderTasks();
      console.log('Todo Manager PWA initialized');
    }

    // Priority selection
    function setPriority(priority) {
      currentPriority = priority;
      // Update visual feedback
      const priorities = ['low', 'medium', 'high', 'urgent'];
      priorities.forEach(p => {
        const element = document.getElementById('priority-' + p);
        if (element) {
          element.setAttribute('stroke', p === priority ? '#ffffff' : 'none');
          element.setAttribute('stroke-width', p === priority ? '3' : '0');
        }
      });
      console.log('Priority set to:', priority);
    }

    // Focus on task input (simulate input field)
    function focusTaskInput() {
      const inputText = document.getElementById('task-input-text');
      if (inputText) {
        inputText.textContent = 'Type your task here...';
        inputText.setAttribute('fill', '#ffffff');
      }
      // Simple prompt-based input for SVG compatibility
      const userInput = prompt('Enter task description:');
      if (userInput && userInput.trim()) {
        taskInputValue = userInput.trim();
        inputText.textContent = taskInputValue;
      } else {
        inputText.textContent = 'Click to enter task description...';
        inputText.setAttribute('fill', '#bbbbbb');
      }
    }

    // Add new task
    function addNewTask() {
      // Get values from real HTML elements
      const taskInput = document.getElementById('task-input');
      const prioritySelect = document.getElementById('priority-selector');
      
      if (!taskInput || !prioritySelect) {
        alert('Error: Input elements not found');
        return;
      }
      
      const taskText = taskInput.value.trim();
      const priority = prioritySelect.value;
      
      if (!taskText) {
        alert('Please enter a task description first');
        return;
      }

      const newTask = {
        id: Date.now().toString(),
        text: taskText,
        priority: priority,
        status: 'pending',
        createdAt: new Date().toISOString(),
        completedAt: null
      };

      tasks.push(newTask);
      saveTasks();
      updateStats();
      renderTasks();

      // Reset input fields
      taskInput.value = '';
      prioritySelect.value = 'low';

      console.log('Task added:', newTask);
    }

    // Toggle task completion
    function toggleTask(taskId) {
      const task = tasks.find(t => t.id === taskId);
      if (task) {
        task.status = task.status === 'completed' ? 'pending' : 'completed';
        task.completedAt = task.status === 'completed' ? new Date().toISOString() : null;
        saveTasks();
        updateStats();
        renderTasks();
        console.log('Task toggled:', task);
      }
    }

    // Delete task
    function deleteTask(taskId) {
      if (confirm('Are you sure you want to delete this task?')) {
        tasks = tasks.filter(t => t.id !== taskId);
        saveTasks();
        updateStats();
        renderTasks();
        console.log('Task deleted:', taskId);
      }
    }

    // Render tasks in the HTML container
    function renderTasks() {
      const container = document.getElementById('tasks-container');
      if (!container) return;

      // Clear existing tasks
      container.innerHTML = '';

      // If no tasks, show placeholder
      if (tasks.length === 0) {
        container.innerHTML = '<div style="color:#ffffff;font-size:14px;text-align:center;margin-top:100px;">No tasks yet. Add your first task above!</div>';
        return;
      }

      // Render each task as HTML
      tasks.forEach((task, index) => {
        const taskDiv = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');
        taskDiv.style.cssText = `
          margin: 8px 0; 
          padding: 10px; 
          border-radius: 6px; 
          border: 1px solid #4caf50; 
          background: rgba(76,175,80,0.1);
          display: flex;
          justify-content: space-between;
          align-items: center;
        `;
        
        // Set opacity separately for completed tasks
        if (task.status === 'completed') {
          taskDiv.style.opacity = '0.5';
        }

        // Task content
        const taskContent = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');
        taskContent.style.cssText = 'color: #ffffff; font-size: 14px; flex-grow: 1;';
        taskContent.innerHTML = `
          <strong>${task.text}</strong><br>
          <small style="color: #aaa;">Priority: ${task.priority} | Status: ${task.status}</small>
        `;

        // Task buttons
        const taskButtons = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');
        taskButtons.style.cssText = 'display: flex; gap: 5px;';
        
        // Toggle button
        const toggleBtn = document.createElementNS('http://www.w3.org/1999/xhtml', 'button');
        toggleBtn.textContent = task.status === 'completed' ? 'Undo' : 'Done';
        toggleBtn.style.cssText = `
          padding: 4px 8px; 
          border-radius: 4px; 
          border: 1px solid #4caf50; 
          background: ${task.status === 'completed' ? '#ff9800' : '#4caf50'}; 
          color: white; 
          font-size: 10px; 
          cursor: pointer;
        `;
        toggleBtn.onclick = () => toggleTask(task.id);

        // Delete button
        const deleteBtn = document.createElementNS('http://www.w3.org/1999/xhtml', 'button');
        deleteBtn.textContent = 'Delete';
        deleteBtn.style.cssText = `
          padding: 4px 8px; 
          border-radius: 4px; 
          border: 1px solid #f44336; 
          background: #f44336; 
          color: white; 
          font-size: 10px; 
          cursor: pointer;
        `;
        deleteBtn.onclick = () => deleteTask(task.id);

        taskButtons.appendChild(toggleBtn);
        taskButtons.appendChild(deleteBtn);
        
        taskDiv.appendChild(taskContent);
        taskDiv.appendChild(taskButtons);
        container.appendChild(taskDiv);
      });

      console.log('Tasks rendered:', tasks.length);
    }

    // Update statistics
    function updateStats() {
      const pendingCount = tasks.filter(t => t.status === 'pending').length;
      const completedCount = tasks.filter(t => t.status === 'completed').length;
      const totalCount = tasks.length;

      const pendingEl = document.getElementById('pending-count');
      const completedEl = document.getElementById('completed-count');
      const totalEl = document.getElementById('total-count');

      if (pendingEl) pendingEl.textContent = 'Pending: ' + pendingCount;
      if (completedEl) completedEl.textContent = 'Completed: ' + completedCount;
      if (totalEl) totalEl.textContent = 'Total: ' + totalCount;
    }

    // Save tasks to localStorage
    function saveTasks() {
      try {
        localStorage.setItem('todoManager_tasks', JSON.stringify(tasks));
      } catch (e) {
        console.warn('Could not save to localStorage:', e);
      }
    }

    // Load tasks from localStorage
    function loadTasks() {
      try {
        const saved = localStorage.getItem('todoManager_tasks');
        if (saved) {
          tasks = JSON.parse(saved);
        }
      } catch (e) {
        console.warn('Could not load from localStorage:', e);
        tasks = [];
      }
    }

    // Clear completed tasks
    function clearCompleted() {
      if (confirm('Delete all completed tasks?')) {
        tasks = tasks.filter(t => t.status !== 'completed');
        saveTasks();
        updateStats();
        renderTasks();
        console.log('Completed tasks cleared');
      }
    }

    // Export tasks to JSON
    function exportTasks() {
      const dataStr = JSON.stringify(tasks, null, 2);
      const dataBlob = new Blob([dataStr], {type: 'application/json'});
      const url = URL.createObjectURL(dataBlob);
      const link = document.createElement('a');
      link.href = url;
      link.download = 'todo-manager-export.json';
      link.click();
      console.log('Tasks exported');
    }

    // Sync with PHP backend
    function syncWithBackend() {
      console.log('Syncing with PHP backend...');
      // Simulate backend sync
      alert('Backend sync completed! ' + tasks.length + ' tasks synchronized.');
    }

    // Initialize the app when SVG loads
    document.addEventListener('DOMContentLoaded', initTodoApp);

    // Initialize immediately if DOM is already loaded
    if (document.readyState !== 'loading') {
      initTodoApp();
    }
  ]]></script>
</svg>
