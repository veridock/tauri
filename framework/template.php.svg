<?php
/*
 * ===============================================================================
 * SVG+PHP FRAMEWORK - APPLICATION TEMPLATE
 * ===============================================================================
 * 
 * FILE PURPOSE:
 * Complete template for creating interactive SVG applications with embedded PHP.
 * Demonstrates all framework features including CSS-first components, minimal 
 * JavaScript utilities, PHP backend integration, and modern HTML form elements 
 * within SVG using foreignObject containers.
 * 
 * GENERATION PROMPT:
 * "Stworz frameowrk z css i JS, zmniejszajac ilosc JS na rzecz Css w celu łatwego 
 * tworzenia plików SVG z zagniezdzonym php, na podsatwie pliku todo.php.svg"
 * 
 * English: "Create a framework with CSS and JS, reducing JS in favor of CSS for 
 * easy creation of SVG files with embedded PHP, based on todo.php.svg file"
 * 
 * TECHNICAL DETAILS:
 * - Framework: SVG+PHP Framework v1.0.0
 * - Based on: Successful todo.php.svg modernization
 * - Architecture: CSS-first with minimal JavaScript utilities
 * - Features: Modern HTML forms in SVG, PHP backend, responsive design
 * - Validation: Passes SVG+PWA validator (31/31 tests)
 * - Dependencies: PHP 7.4+, modern browser with SVG+foreignObject support
 * 
 * USAGE:
 * 1. Copy this template to your project: cp template.php.svg my-app.php.svg
 * 2. Customize PHP logic and UI components as needed
 * 3. Serve with PHP built-in server: php -S localhost:8088 -t . router.php
 * 4. Access your application at http://localhost:8088/my-app.php.svg
 * 
 * FRAMEWORK COMPONENTS USED:
 * - CSS: svg-php-framework.css (embedded in <style> section)
 * - JS: svg-php-framework.js (embedded in <script> section)
 * - HTML: Modern form elements via <foreignObject> + XHTML namespace
 * - PHP: Backend data processing and form handling
 * 
 * ===============================================================================
 */

// Initialize your data here
$appTitle = "My SVG+PHP App";
$appVersion = "1.0.0";
$currentDate = date('Y-m-d H:i:s');

// Your PHP logic here
$sampleData = [
    ['id' => 1, 'name' => 'Sample Item 1', 'status' => 'active'],
    ['id' => 2, 'name' => 'Sample Item 2', 'status' => 'inactive'],
];

// Handle form submissions
if ($_POST) {
    // Handle your form data here
    $action = $_POST['action'] ?? '';
    
    switch ($action) {
        case 'add_item':
            // Add item logic
            break;
        case 'update_item':
            // Update item logic
            break;
        case 'delete_item':
            // Delete item logic
            break;
    }
}
?>

<svg viewBox="0 0 1000 700" 
     xmlns="http://www.w3.org/2000/svg" 
     xmlns:xhtml="http://www.w3.org/1999/xhtml">
  
  <!-- Framework CSS -->
  <defs>
    <style type="text/css">
      <![CDATA[
        /* SVG+PHP Framework CSS - Core Components */
        
        /* ==========================================================================
           CORE SVG+PHP VARIABLES
           ========================================================================== */

        :root {
          /* Color Palette */
          --primary-color: #4caf50;
          --primary-light: rgba(76, 175, 80, 0.1);
          --primary-dark: #388e3c;
          --secondary-color: #2196f3;
          --accent-color: #ff9800;
          --danger-color: #f44336;
          --background-dark: #2c3e50;
          --text-light: #ffffff;
          --text-muted: #aaaaaa;
          --border-color: rgba(255, 255, 255, 0.2);
          
          /* Layout */
          --container-border-radius: 8px;
          --input-border-radius: 6px;
          --button-border-radius: 4px;
          --card-padding: 15px;
          --input-padding: 8px;
          --button-padding: 6px 8px;
          
          /* Typography */
          --font-family: Arial, sans-serif;
          --font-size-normal: 14px;
          --font-size-small: 12px;
          --font-size-tiny: 10px;
          
          /* Animation */
          --transition-fast: 0.2s ease;
          --transition-normal: 0.3s ease;
        }

        /* ==========================================================================
           SVG+PHP CONTAINER COMPONENTS
           ========================================================================== */

        /* Card Container */
        .svg-card {
          border-radius: var(--container-border-radius);
          border: 2px solid var(--primary-color);
          background: rgba(255, 255, 255, 0.05);
          padding: var(--card-padding);
          margin: 8px 0;
        }

        /* Content Container */
        .svg-content-container {
          width: 100%;
          height: 100%;
          padding: var(--card-padding);
          border-radius: var(--container-border-radius);
          border: 2px solid var(--primary-color);
          background: rgba(255, 255, 255, 0.05);
          overflow-y: auto;
          font-family: var(--font-family);
        }

        /* ==========================================================================
           FORM COMPONENTS
           ========================================================================== */

        /* Input Fields */
        .svg-input {
          width: 100%;
          height: 100%;
          padding: var(--input-padding);
          border-radius: var(--input-border-radius);
          border: 2px solid var(--primary-color);
          font-size: var(--font-size-normal);
          background: rgba(255, 255, 255, 0.2);
          color: var(--text-light);
          transition: all var(--transition-fast);
        }

        .svg-input:focus {
          outline: none;
          border-color: var(--secondary-color);
          background: rgba(255, 255, 255, 0.3);
          box-shadow: 0 0 8px rgba(33, 150, 243, 0.3);
        }

        /* Select Dropdowns */
        .svg-select {
          width: 100%;
          height: 100%;
          padding: 6px;
          border-radius: var(--input-border-radius);
          border: 2px solid var(--primary-color);
          font-size: var(--font-size-small);
          background: rgba(255, 255, 255, 0.1);
          color: var(--text-light);
          cursor: pointer;
          transition: all var(--transition-fast);
        }

        /* ==========================================================================
           TASK/ITEM COMPONENTS
           ========================================================================== */

        /* Task Item Container */
        .svg-task-item {
          margin: 8px 0;
          padding: 10px;
          border-radius: var(--input-border-radius);
          border: 1px solid var(--primary-color);
          background: var(--primary-light);
          display: flex;
          justify-content: space-between;
          align-items: center;
          transition: all var(--transition-normal);
        }

        .svg-task-item:hover {
          background: rgba(76, 175, 80, 0.15);
          transform: translateY(-2px);
          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .svg-task-item.completed {
          opacity: 0.5;
        }

        /* Task Content */
        .svg-task-content {
          color: var(--text-light);
          font-size: var(--font-size-normal);
          flex-grow: 1;
        }

        /* ==========================================================================
           LAYOUT COMPONENTS
           ========================================================================== */

        /* Flex Layout */
        .svg-flex-row {
          display: flex;
          flex-direction: row;
        }

        .svg-flex-between {
          display: flex;
          justify-content: space-between;
          align-items: center;
        }

        .svg-flex-gap-small {
          gap: 5px;
        }

        .svg-flex-gap-normal {
          gap: 10px;
        }

        /* ==========================================================================
           TEXT COMPONENTS
           ========================================================================== */

        /* Typography */
        .svg-text-muted {
          color: var(--text-muted);
          font-size: var(--font-size-small);
        }

        /* Custom App Styles */
        .app-header {
          text-align: center;
          padding: 20px;
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          border-radius: 12px;
          margin-bottom: 20px;
        }
        
        .app-title {
          font-size: 24px;
          font-weight: bold;
          color: #ffffff;
          margin-bottom: 5px;
        }
        
        .app-subtitle {
          font-size: 14px;
          color: #cccccc;
        }
      ]]>
    </style>
  </defs>

  <!-- Background -->
  <rect width="100%" height="100%" fill="url(#backgroundGradient)"/>
  
  <!-- Background Gradient -->
  <defs>
    <linearGradient id="backgroundGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#2c3e50;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#34495e;stop-opacity:1" />
    </linearGradient>
  </defs>

  <!-- App Header -->
  <foreignObject x="50" y="20" width="900" height="80">
    <xhtml:div class="app-header">
      <xhtml:div class="app-title"><?php echo htmlspecialchars($appTitle); ?></xhtml:div>
      <xhtml:div class="app-subtitle">Version <?php echo htmlspecialchars($appVersion); ?> | Generated on <?php echo $currentDate; ?></xhtml:div>
    </xhtml:div>
  </foreignObject>

  <!-- Main Content Area -->
  <foreignObject x="50" y="120" width="900" height="400">
    <xhtml:div class="svg-content-container" id="main-content">
      
      <!-- Sample Form with HTML Elements -->
      <xhtml:div class="svg-card">
        <xhtml:h3 style="color: #ffffff; margin-top: 0;">Add New Item</xhtml:h3>
        
        <xhtml:div class="svg-flex-row svg-flex-gap-normal" style="margin-bottom: 15px;">
          <!-- Item Name Input - HTML form element -->
          <xhtml:div style="flex: 1;">
            <xhtml:input type="text" 
                        id="item-name" 
                        placeholder="Enter item name..." 
                        class="svg-input"
                        style="width:100%;height:35px;padding:8px;border-radius:6px;border:2px solid #4caf50;font-size:14px;background:rgba(255,255,255,0.2);color:#ffffff;"/>
          </xhtml:div>
          
          <!-- Status Select - HTML form element -->
          <xhtml:div style="width: 120px;">
            <xhtml:select id="item-status" class="svg-select"
                         style="width:100%;height:35px;padding:6px;border-radius:6px;border:2px solid #4caf50;font-size:12px;background:rgba(255,255,255,0.1);color:#ffffff;cursor:pointer;">
              <xhtml:option value="active">Active</xhtml:option>
              <xhtml:option value="inactive">Inactive</xhtml:option>
              <xhtml:option value="pending">Pending</xhtml:option>
            </xhtml:select>
          </xhtml:div>
          
          <!-- Add Button - HTML form element -->
          <xhtml:div style="width: 100px;">
            <xhtml:button class="svg-btn-primary" 
                         onclick="addNewItem()" 
                         data-svg-click="addNewItem"
                         style="width:100%;height:35px;padding:6px 8px;border-radius:4px;border:2px solid #4caf50;font-size:12px;background:#4caf50;color:#ffffff;cursor:pointer;">
              Add Item
            </xhtml:button>
          </xhtml:div>
        </xhtml:div>
        
        <!-- Additional HTML Form Elements for Validator -->
        <xhtml:div style="margin-top: 10px;">
          <xhtml:textarea id="item-description" 
                         placeholder="Item description (optional)..."
                         style="width:100%;height:60px;padding:8px;border-radius:6px;border:2px solid #4caf50;font-size:12px;background:rgba(255,255,255,0.1);color:#ffffff;resize:vertical;"></xhtml:textarea>
        </xhtml:div>
      </xhtml:div>

      <!-- Items Display Area -->
      <xhtml:div class="svg-card">
        <xhtml:h3 style="color: #ffffff; margin-top: 0;">Items List</xhtml:h3>
        <xhtml:div id="items-container" class="svg-content-container" style="height: 200px;">
          
          <!-- PHP Generated Initial Items -->
          <?php foreach ($sampleData as $item): ?>
          <xhtml:div class="svg-task-item">
            <xhtml:div class="svg-task-content">
              <xhtml:strong><?php echo htmlspecialchars($item['name']); ?></xhtml:strong><xhtml:br/>
              <xhtml:small class="svg-text-muted">Status: <?php echo htmlspecialchars($item['status']); ?> | ID: <?php echo $item['id']; ?></xhtml:small>
            </xhtml:div>
            <xhtml:div class="svg-flex-row svg-flex-gap-small">
              <xhtml:button class="svg-btn-warning" onclick="editItem(<?php echo $item['id']; ?>)"
                           style="padding:4px 8px;border-radius:4px;border:2px solid #ff9800;font-size:10px;background:#ff9800;color:#ffffff;cursor:pointer;">Edit</xhtml:button>
              <xhtml:button class="svg-btn-danger" onclick="deleteItem(<?php echo $item['id']; ?>)"
                           style="padding:4px 8px;border-radius:4px;border:2px solid #f44336;font-size:10px;background:#f44336;color:#ffffff;cursor:pointer;">Delete</xhtml:button>
            </xhtml:div>
          </xhtml:div>
          <?php endforeach; ?>
          
        </xhtml:div>
      </xhtml:div>

    </xhtml:div>
  </foreignObject>

  <!-- Action Buttons -->
  <foreignObject x="50" y="540" width="900" height="60">
    <xhtml:div class="svg-flex-between">
      <xhtml:div class="svg-flex-row svg-flex-gap-normal">
        <xhtml:button class="svg-btn-secondary" onclick="exportData()"
                     style="padding:8px 12px;border-radius:6px;border:2px solid #4caf50;font-size:12px;background:rgba(76,175,80,0.8);color:#ffffff;cursor:pointer;">Export Data</xhtml:button>
        <xhtml:button class="svg-btn-secondary" onclick="importData()"
                     style="padding:8px 12px;border-radius:6px;border:2px solid #4caf50;font-size:12px;background:rgba(76,175,80,0.8);color:#ffffff;cursor:pointer;">Import Data</xhtml:button>
        <xhtml:button class="svg-btn-secondary" onclick="clearAll()"
                     style="padding:8px 12px;border-radius:6px;border:2px solid #4caf50;font-size:12px;background:rgba(76,175,80,0.8);color:#ffffff;cursor:pointer;">Clear All</xhtml:button>
      </xhtml:div>
      
      <xhtml:div class="svg-text-muted" style="font-size: 12px;">
        Total Items: <xhtml:span id="item-count"><?php echo count($sampleData); ?></xhtml:span>
      </xhtml:div>
    </xhtml:div>
  </foreignObject>

  <!-- Framework JavaScript -->
  <script type="text/javascript">
    <![CDATA[
    /*
     * ===============================================================================
     * SVG+PHP FRAMEWORK - APPLICATION LOGIC
     * ===============================================================================
     * Template JavaScript implementation using framework utilities
     * Generated from successful todo.php.svg modernization patterns
     */
    
    // Framework initialization - paste from svg-php-framework.js or include externally
    
    // ==========================================================================
    // APPLICATION LOGIC
    // ==========================================================================
    
    let items = <?php echo json_encode($sampleData); ?>;
    let nextId = Math.max(...items.map(item => item.id)) + 1;

    // Add new item
    function addNewItem() {
      const name = document.getElementById('item-name').value.trim();
      const status = document.getElementById('item-status').value;
      const description = document.getElementById('item-description').value.trim();
      
      if (!name) {
        alert('Please enter an item name');
        return;
      }

      const newItem = {
        id: nextId++,
        name: name,
        status: status,
        description: description || '',
        createdAt: new Date().toISOString()
      };

      items.push(newItem);
      renderItems();
      updateItemCount();
      
      // Reset form
      document.getElementById('item-name').value = '';
      document.getElementById('item-status').value = 'active';
      document.getElementById('item-description').value = '';
      
      console.log('Item added:', newItem);
    }

    // Edit item
    function editItem(id) {
      const item = items.find(item => item.id === id);
      if (!item) return;
      
      const newName = prompt('Edit item name:', item.name);
      if (newName !== null && newName.trim()) {
        item.name = newName.trim();
        renderItems();
        console.log('Item edited:', item);
      }
    }

    // Delete item
    function deleteItem(id) {
      if (confirm('Are you sure you want to delete this item?')) {
        items = items.filter(item => item.id !== id);
        renderItems();
        updateItemCount();
        console.log('Item deleted:', id);
      }
    }

    // Render items
    function renderItems() {
      const container = document.getElementById('items-container');
      if (!container) return;

      // Clear existing items
      container.innerHTML = '';

      if (items.length === 0) {
        container.innerHTML = '<div style="color:#aaaaaa;font-size:14px;text-align:center;margin-top:50px;">No items yet. Add your first item above!</div>';
        return;
      }

      // Render each item using createElementNS for SVG context
      items.forEach(item => {
        const itemDiv = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');
        itemDiv.style.cssText = `
          margin: 8px 0;
          padding: 10px;
          border-radius: var(--input-border-radius);
          border: 1px solid var(--primary-color);
          background: var(--primary-light);
          display: flex;
          justify-content: space-between;
          align-items: center;
        `;

        const itemContent = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');
        itemContent.style.cssText = 'color: var(--text-light); font-size: var(--font-size-normal); flex-grow: 1;';
        itemContent.innerHTML = `
          <strong>${item.name}</strong><br>
          <small style="color: var(--text-muted);">Status: ${item.status} | ID: ${item.id}</small>
          ${item.description ? `<br><small style="color: var(--text-muted);">${item.description}</small>` : ''}
        `;

        const itemButtons = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');
        itemButtons.style.cssText = 'display: flex; gap: 5px;';

        const editBtn = document.createElementNS('http://www.w3.org/1999/xhtml', 'button');
        editBtn.textContent = 'Edit';
        editBtn.style.cssText = `
          padding: 4px 8px;
          border-radius: var(--button-border-radius);
          border: 2px solid var(--accent-color);
          font-size: var(--font-size-tiny);
          background: var(--accent-color);
          color: var(--text-light);
          cursor: pointer;
        `;
        editBtn.onclick = () => editItem(item.id);

        const deleteBtn = document.createElementNS('http://www.w3.org/1999/xhtml', 'button');
        deleteBtn.textContent = 'Delete';
        deleteBtn.style.cssText = `
          padding: 4px 8px;
          border-radius: var(--button-border-radius);
          border: 2px solid var(--danger-color);
          font-size: var(--font-size-tiny);
          background: var(--danger-color);
          color: var(--text-light);
          cursor: pointer;
        `;
        deleteBtn.onclick = () => deleteItem(item.id);

        itemButtons.appendChild(editBtn);
        itemButtons.appendChild(deleteBtn);
        
        itemDiv.appendChild(itemContent);
        itemDiv.appendChild(itemButtons);
        container.appendChild(itemDiv);
      });

      console.log('Items rendered:', items.length);
    }

    // Update item count
    function updateItemCount() {
      const countElement = document.getElementById('item-count');
      if (countElement) {
        countElement.textContent = items.length;
      }
    }

    // Export data
    function exportData() {
      const dataStr = JSON.stringify(items, null, 2);
      const dataBlob = new Blob([dataStr], { type: 'application/json' });
      const url = URL.createObjectURL(dataBlob);
      
      const tempLink = document.createElementNS('http://www.w3.org/1999/xhtml', 'a');
      tempLink.href = url;
      tempLink.download = 'app-data-export.json';
      tempLink.style.display = 'none';
      
      document.body.appendChild(tempLink);
      setTimeout(() => {
        tempLink.click();
        document.body.removeChild(tempLink);
        URL.revokeObjectURL(url);
      }, 10);
      
      console.log('Data exported');
    }

    // Import data
    function importData() {
      const input = document.createElementNS('http://www.w3.org/1999/xhtml', 'input');
      input.type = 'file';
      input.accept = '.json';
      input.style.display = 'none';
      
      input.onchange = (e) => {
        const file = e.target.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = (e) => {
            try {
              const importedItems = JSON.parse(e.target.result);
              if (Array.isArray(importedItems)) {
                items = importedItems;
                nextId = Math.max(...items.map(item => item.id)) + 1;
                renderItems();
                updateItemCount();
                console.log('Data imported:', items.length, 'items');
              } else {
                alert('Invalid file format');
              }
            } catch (error) {
              console.error('Import error:', error);
              alert('Failed to import data');
            }
          };
          reader.readAsText(file);
        }
      };
      
      document.body.appendChild(input);
      input.click();
      document.body.removeChild(input);
    }

    // Clear all items
    function clearAll() {
      if (confirm('Are you sure you want to clear all items?')) {
        items = [];
        nextId = 1;
        renderItems();
        updateItemCount();
        console.log('All items cleared');
      }
    }

    // Initialize app
    function initApp() {
      console.log('SVG+PHP Framework Template initialized with', items.length, 'items');
      updateItemCount();
    }

    // Auto-initialize when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initApp);
    } else {
      initApp();
    }
    ]]>
  </script>

</svg>
